#!/bin/bash
#
# Copyright (C) 2022  Sanjay Rao srao@redhat.com
#                     David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# Script to set the system up for running hammerdb.
#
disks=
mountpoint=/var/opt/hammerdb
db_type=
log_mount_point=
install_packages=1
instdir=/var/local/HammerDB
srcdir=/opt/HammerDB

install_mssql()
{
	if ((install_packages)) ; then
		curl -sS -o /etc/yum.repos.d/mssql-server.repo https://packages.microsoft.com/config/rhel/9/mssql-server-2022.repo
		curl -sS -o /etc/yum.repos.d/msprod.repo https://packages.microsoft.com/config/rhel/9/prod.repo
		ACCEPT_EULA=y dnf --setopt=install_weak_deps=0 install -y \
			      mssql-server \
			      mssql-tools \
			      unixODBC-devel
	fi
	systemctl stop mssql-server
	# shellcheck disable=SC2016
	echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
	cd "$srcdir" || fatal "Cannot cd /usr/local/hammerdb"
	cp -R  "${srcdir}"/hammerdb-tpcc/mssql/* .

	rm -rf "${mountpoint}"/mssql_data/
	mkdir -p "${mountpoint}"/mssql_data
	chown -R mssql:mssql "${mountpoint}"/mssql_data 

	cd /opt/mssql/bin/ || fatal "Cannot cd /opt/mssql/bin"
	mkdir /var/opt/mssql/secrets/

	MSSQL_SA_PASSWORD="100yard-"
	export MSSQL_SA_PASSWORD
	export MSSQL_PID="Evaluation"

	rm -rf /var/opt/mssql
	mkdir /var/opt/mssql

	./mssql-conf -n setup accept-eula <<'EOF'
1
Yes
100yard-
100yard-
EOF

	sleep 30
	systemctl stop mssql-server

	cd /var/opt/mssql || fatal "Cannot cd /var/opt/mssql"
	mv data "${mountpoint}"/mssql_data
	ln -sf "${mountpoint}"/mssql_data/data .

	systemctl disable mssql-server.service
	systemctl restart mssql-server.service

	cd "$instdir" || fatal "Cannot cd /usr/local/hammerdb"

	./createdb_mssql_mnt.sh -m "${mountpoint}" > crdb.out 2>&1

	./update_temp_mnt.sh -m "${mountpoint}" > upd_tmp.out 2>&1
}

install_mariadb()
{
	if ((install_packages)) ; then
		ACCEPT_EULA=y dnf --setopt=install_weak_deps=0 install -y \
			      mariadb \
			      mariadb-common \
			      mariadb-devel \
			      mariadb-errmsg \
			      mariadb-server \
			      mariadb-server-utils \
			      mysql-libs
	fi
	systemctl stop mariadb.service
	#
	# Configure things in and mount the appropriate item.
	#
	cd "$srcdir" || fatal "Cannot cd /usr/local/hammerdb"
	cp -R  "${srcdir}"/tmp/hammerdb-tpcc/mariadb/* .

	#
	# Clean up any residual stuff and set up the directories
	#
	rm -rf "${mountpoint}"/mysql/* "${log_mount_point}"/mysql/log
	mkdir -p "${mountpoint}"/mysql/data
	chown -R mysql:mysql "${mountpoint}"/mysql
        mkdir -p "${log_mount_point}"/mysql/log
        chown -R mysql:mysql "${log_mount_point}"/mysql


	totmem=$(grep MemTotal /proc/meminfo | awk '{print $2}')
	#
	# Updating the value of buffer_pool_size based on available memory
	# Setting bufferpool to half of physical memory if memory is less than 128G else set to 64G
	#
	totmem_BP=$((totmem / 1024))
	totmem_BP=$((totmem_BP / 2))

	#
	# Configure the mariadb config file with mountpoint and bufferpool
	#

	sed -i "s+^datadir=.*+datadir=${mountpoint}\/mysql\/data+" my.cnf
	if ((totmem_BP < 64000 )); then
   		sed -i "s/^innodb_buffer_pool_size=.*/innodb_buffer_pool_size=${totmem_BP}M/" my.cnf
	else
   		sed -i "s/^innodb_buffer_pool_size=.*/innodb_buffer_pool_size=64000M/" my.cnf
	fi
	sed -i "/innodb_file_per_table/a innodb_log_group_home_dir = ${log_mount_point}\/mysql\/log" my.cnf

	cp my.cnf /etc/my.cnf

	systemctl restart mariadb.service

	mysql -u root <<'EOF'
SET PASSWORD FOR 'root'@localhost = PASSWORD('mysql');
flush privileges;
exit
EOF

	sleep 30
	systemctl restart mariadb.service
}

install_postgres()
{
	if ((install_packages)) ; then
		ACCEPT_EULA=y dnf --setopt=install_weak_deps=0 install -y \
			      postgresql \
			      postgresql-contrib \
			      postgresql-server \
			      glibc-langpack-en \
			      libpq
	fi
	systemctl stop postgresql.service
	cd "$srcdir" || fatal "Cannot cd /usr/local/hammerdb"
	cp -R "${srcdir}"/hammerdb-tpcc/postgres/* .

	rm -rf /var/lib/pgsql/data
	rm -rf "${mountpoint}"/postgres_data

	mkdir -p "${mountpoint}"/postgres_data
	ln -sf "${mountpoint}"/postgres_data /var/lib/pgsql/data
	chmod 700 "${mountpoint}"/postgres_data
	chown -R postgres:postgres "${mountpoint}"/postgres_data
        mkdir -p "${log_mount_point}"/postgres_log
        chown -R mysql:mysql "${log_mount_point}"/postgres_log

	postgresql-setup initdb
	sleep 10
	mv /var/lib/pgsql/data/pg_wal "${log_mount_point}"/postgres_log
	ln -sf "${log_mount_point}"/postgres_log/pg_wal /var/lib/pgsql/data/pg_wal

	totmem=$(grep MemTotal /proc/meminfo | awk '{print $2}')

	#
	# Change shared_buffer size based on available memory
	#
	totmem_MB=$((totmem / 1024))
	totmem_BP=$((totmem_MB / 2))   # Buffer pool is half of physical memory
	#
	# IF total memory is more than 128G then bufferpool is set to 64G else set to half of physical memory
	#
	if ((totmem_BP < 65000)) ; then
   		sed -i "s/^shared_buffers =.*/shared_buffers = ${totmem_BP}MB/" postgresql.conf
	else
	   	sed -i "s/^shared_buffers =.*/shared_buffers = 64000MB/" postgresql.conf
	fi

	cp -f pg_hba.conf /var/lib/pgsql/data
	cp -f postgresql.conf /var/lib/pgsql/data
	systemctl restart postgresql
	psql -U postgres -d postgres <<EOF
alter role postgres password 'postgres'
EOF
	sleep 30
	systemctl restart postgresql.service
}

usage()
{
	[[ -n "$*" ]] && echo "$*"
        cat <<EOF
Usage:
        ./install-script [-h] [-d disk name] [-m mount point] [-t dbtype]

        Usage:
        -h help
        -d <disk device name>
        -m <mount point, default $mountpoint>
	-t <mariadb, mssql, postgres>

       Examples:
        ./install-script -d /dev/sdb mariadb
        ./install-script -m /var/opt/hammerdb mssql
EOF
        exit
}

fatal()
{
	echo "$*"
	exit 1
}

install_hammerdb() {
	cd /var/tmp || fatal "Cannot cd /tmp"
	curl -ksS https://people.redhat.com/srao/Hammerdb-Kit/hammerdb-tpcc.tar | tar xf -
	cd /var/tmp/hammerdb-tpcc/Hammerdb || fatal "Cannot cd to hammerdb package directory!"
	./HammerDB-3.2-Linux-x86-64-Install --mode console <<EOF
y
$instdir
EOF
	rm -rf /var/tmp/hammerdb-tpcc
}

#
# If we did not pass any arguments, flag it.
#
(($#)) || usage

while getopts 'hd:M:m:t:i:pP' opt "$@" ; do
	case "$opt" in
		d) disks="$OPTARG" ;;
		M) log_mount_point="$OPTARG" ;;
		m) mountpoint="$OPTARG" ;;
		t) db_type="$OPTARG" ;;
		p) install_packages=1 ;;
		P) install_packages=0 ;;
		i) instdir="$OPTARG" ;;
		h) usage ;;
		*) usage ;;
	esac
done
shift $((OPTIND-1))
[[ -n "${1:-}" ]] && db_type="$1"

[[ -n "$db_type" ]] || usage "Database type must be specified"

#
# Turn selinux off.
#
setenforce 0

install_hammerdb

#
# Shutdown all running instances
#
systemctl stop mssql-server.service postgresql.service mariadb.service

#
# Create filestems and mount if required
#
if [[ -n "$disks" ]]; then
	if [[ -z "$disks" ]] ; then
		echo "Disk must be specified if -m is not used"
		usage
	fi
	echo "using disk option"
	umount "$mountpoint"
	mkfs.xfs -f "${disks}"
	mkdir -p "$mountpoint"
	mount "${disks}" "$mountpoint"
fi

log_mount_point=${log_mount_point:-$mountpoint}
case "$db_type" in
	mssql) install_mssql ;;
	mariadb) install_mariadb ;;
	postgres) install_postgres ;;
	*) echo "Unknown database $db_type specified"; usage ;;
esac

# Local Variables:
# sh-indentation: 8
# End:
